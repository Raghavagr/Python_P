#       GRAPH TRAVERSAL(BFS in Undirected Graph) 

// URL = https://ide.geeksforgeeks.org/gUlI5WQFlM

## CODE
## DFS uses Stack and Recursion
## BFS uses Queue and Iteration

## DFS TRAVERSAL ALGORITHM
### Time.C -> O(V+E)
### Space.C -> O(V)

from collections import defaultdict
from collections import deque

def bfs(graph, start, visited, path):
    queue = deque()
    path.append(start)
    queue.append(start)
    visited[start] = True
    while len(queue) != 0:
        tmpnode = queue.popleft()
        for neighbour in graph[tmpnode]:
            if visited[neighbour] == False:
                path.append(neighbour)
                queue.append(neighbour)
                visited[neighbour] = True
    return path


v, e = map(int, input().split()) #vertex and edges

graph = defaultdict(list)

for i in range(e):
    u, v = map(str, input().split())
    graph[u].append(v)
    graph[v].append(u)
    
path = []
start = 'A'
visited = defaultdict(bool)
traversepath = bfs(graph, start, visited, path)
print(traversepath)
