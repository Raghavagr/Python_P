// Print Fibonacci series upto gives number

''
Febonacci sequence
index   -> 0,1,2,3,4,5,6, 7, 8
fib seq -> 0,1,1,2,3,5,8,13,21
problem - write function to return nth term of finonacci sequence
feb(5th) = feb(4) + feb(3)
feb(4) = feb(3) + feb(2)
feb(3) = feb(2) + feb(1)
feb(2) = feb(1) + feb(0)
feb(1) = 1
feb(0) = 0
'''

-> The traditional method which we use with recursion fib(n-1) + fib(n-2) is too costly, Because its complexity is O(2^n)

So we can use 2 Dynamic Programming approach
Dynamic programming
we can use if there is overlapping subproblem
1) Memoization
2) Tabular

    **** MEMOIZATION  ****   COMPLEXITY -> O(n)

// URL - https://ide.geeksforgeeks.org/JxK4rHfv4n  

#Fibonacci Series code using Memoization(DP)

memo = {0:0,1:1}

def fib(n):
    if n in memo:
        return memo[n]
    else:
        value = fib(n-1) + fib(n-2)
        
    memo[n] = value
    return value
    
#let's see how fast it runs
for i in range(50):
    print(i,"->", fib(i))
    
    
    **** TABULAR  ****   COMPLEXITY -> O(n)
    
// URL - https://ide.geeksforgeeks.org/zDjM4xII85

#Fibonacci Series code using Tabular(DP)

def fib(n):
    table = [0] * (n+1)
    table[1] = 1
    for i in range(2, n+1):
        table[i] = table[i-1] + table[i-2]
        
    return table[-1]  #last term is always a output
 
#you can also get cmplt list, return table
n = int(input())   
print(fib(n))

    

