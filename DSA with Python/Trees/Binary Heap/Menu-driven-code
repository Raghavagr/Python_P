// Implement all operations of Binary Heap

// URL -> https://ide.geeksforgeeks.org/bca85d75-c5d9-43db-9950-f48bd992740b


#code
class Heap:
    def __init__(self, size):
        self.customList = [None] * (size + 1)
        self.heapSize = 0
        self.maxSize = size + 1
    
#Time complexity of peek method is O(1)    
def Peek(rootNode):
    if not rootNode:
        return
    else:
        return rootNode.customList[1]

#Time complexity is O(1)        
def SizeOfHeap(rootNode):
    if not rootNode:
        return
    else:
        return rootNode.heapSize

#Time complexity IS O(N) and space is O(1)        
def levelOrderTraverse(rootNode):
    if not rootNode:
        return
    
    else:
        for i in range(1, rootNode.heapSize + 1):
            print(rootNode.customList[i])
            

def heapifyTreeInsert(rootNode, index, heapType):
    parentIndex = index // 2
    if index <= 1:
        return
    
    if heapType.lower() == "min":
        #root node element shoudl always small else swap
        if rootNode.customList[index] < rootNode.customList[parentIndex]:
            temp = rootNode.customList[index]
            rootNode.customList[index] = rootNode.customList[parentIndex]
            rootNode.customList[parentIndex] = temp
        heapifyTreeInsert(rootNode, parentIndex, heapType)
        
    elif heapType.lower() == "max":
        #root node should be greater else swap
        if rootNode.customList[index] > rootNode.customList[parentIndex]:
            temp = rootNode.customList[index]
            rootNode.customList[index] = rootNode.customList[parentIndex]
            rootNode.customList[parentIndex] = temp
        heapifyTreeInsert(rootNode, parentIndex, heapType)
            
    
#Insert function that will call heapify method
def InsertNode(rootNode, nodeValue, heapType):
    if rootNode.heapSize +1 == rootNode.maxSize:
        return "The binary heap full"
        
    rootNode.customList[rootNode.heapSize + 1] = nodeValue
    rootNode.heapSize += 1
    heapifyTreeInsert(rootNode, rootNode.heapSize, heapType)
    return "The val has been sucessfully inserted"
    
def heapifyTreeExtract(rootNode, index, heapType):
    leftIndex = index * 2
    rightIndex = (index * 2) + 1
    swapChild = 0
    
    if rootNode.heapSize < leftIndex:
        return
    
    elif rootNode.heapSize == leftIndex:
        if heapType == "min":
            if rootNode.customList[index] > rootNode.customList[leftIndex]:
                temp = rootNode.customList[index]
                rootNode.customList[index] = rootNode.customList[leftIndex]
                rootNode.customList[leftIndex] = temp
            return
        
        #if max
        else:
            if rootNode.customList[index] < rootNode.customList[leftIndex]:
                temp = rootNode.customList[index]
                rootNode.customList[index] = rootNode.customList[leftIndex]
                rootNode.customList[leftIndex] = temp
            return
        
    else:
        if heapType == "min":
            if rootNode.customList[leftIndex] < rootNode.customList[rightIndex]:
                swapChild = leftIndex
            else:
                swapChild = rightIndex
                
            if rootNode.customList[index] < rootNode.customList[swapChild]:
                temp = rootNode.customList[index]
                rootNode.customList[index] = rootNode.customList[swapChild]
                rootNode.customList[leftIndex] = temp
            return

def extractNode(rootNode, heapType):
    if rootNode.heapSize == 0:
        return
    
    extractedNode = rootNode.customList[1]
    rootNode.customList[1] = rootNode.customList[rootNode.heapSize]
    rootNode.customList[rootNode.heapSize] = None
    rootNode.heapSize -= 1
    heapifyTreeExtract(rootNode, 1, heapType)
    return extractedNode
    
def DeleteEntireHeap(rootNode):
    rootNode.customList = None
    
newBinaryHeap = Heap(5)
#print(SizeOfHeap(newBinaryHeap)) 
#if class then call print(newBinaryHeap.SizeOfHeap())

#insert
InsertNode(newBinaryHeap, 4, "min")
InsertNode(newBinaryHeap, 7, "min")
InsertNode(newBinaryHeap, 5, "min")
InsertNode(newBinaryHeap, 9, "min")
levelOrderTraverse(newBinaryHeap)

#print(DeleteEntireHeap(newBinaryHeap))
