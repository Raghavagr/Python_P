// WAP to create all operations of Queue using Linked List

// URL -> https://ide.geeksforgeeks.org/5210e371-6d62-477d-a723-8c4817a9801c

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None
        
    #make node eligible for printing
    def __str__(self):
        return str(self.value)
        
class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        
    #make the linked list iterable
    def __iter__(self):
        currNode = self.head
        while currNode:
            yield currNode
            currNode = currNode.next

class Queue:
    def __init__(self):
        self.linkedlist = LinkedList()
        
    #to print the queue implement str method
    def __str__(self):
        values = [str(x) for x in self.linkedlist]
        return ' '.join(values)
        
    def Enque(self, item):
        #we always insert the item at the end of queue
        newNode = Node(item)
        if self.linkedlist.head == None:
            self.linkedlist.head = newNode
            self.linkedlist.tail = newNode
            
        else:
            self.linkedlist.tail.next = newNode
            self.linkedlist.tail = newNode
            
    def isEmpty(self):
        if self.linkedlist.head is None:
            return True
            
        else:
            return False
            
    def Deque(self):
        if self.isEmpty():
            return 'Queue is empty'
            
        else:
            tempNode = self.linkedlist.head
            
            #check if there is only one node
            if self.linkedlist.head == self.linkedlist.tail:
                self.linkedlist.head = None
                self.linkedlist.tail = None
                
            #else there are more then one node so delete first node
            else:
                self.linkedlist.head = self.linkedlist.head.next
                
    def Peek(self):
        if self.isEmpty():
            return 'Queue is empty'
            
        else:
            return self.linkedlist.head
            
    def Delete(self):
        self.linkedlist.head = None
        self.linkedlist.tail = None
    
myQueue = Queue()
myQueue.Enque(2)
myQueue.Enque(5)
myQueue.Enque(8)
print(myQueue)

print("** Deque the element **")
myQueue.Deque()

print(myQueue)

print(f'Peel element of queue is {myQueue.Peek()}')
