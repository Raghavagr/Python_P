// SUPER AND OVERRIDING IN CLASSES

  #  How to override class methods in Python?
Overriding occurs when a derived class or child class has the same method that has already been defined in the base or parent class. 
Being the same methods with the same name and number of parameters, when called checks for the method first in a child class,
and runs it ignoring the method in the parent class because it is already overridden. 
In the case of Instance variables, the case is a little different. When the method is called, the program will look for any instance variable having the same name as the one that is called in the child, 
then in the parent, and after that, it comes again into child class if not found.

// URL: https://ide.geeksforgeeks.org/YU4L4Wcyhx

#code

class A:
    classvar1 = "hello I am in class 1"
    def __init__(self):
        self.var1 = "I am inside class A constructor"
        self.classvar1 = "Instance var in class A"
        self.special = "special"
        
class B(A):
    classvar1 = "hello I am in class 2"
    def __init__(self):
        self.var1 = "I am inside class B constructor"
        #self.classvar1 = "Instance var in class B"
        #super.__init__()
        #print(super().classvar1)
        
        
a = A()
b = B()
print(b.classvar1)

# first it will look in itself, is there any instance var, if not found then go in class A. here I have override the __init__() method 
# and if i try to call suvh a var which is not in B constructor and there in A cons then it will give an error, because it will not go in A, because I have override it
# so In this case we make use of Super() keyword which helps us to print ant imp char which we want from base class constructor.

    ##  Where does super() fit in all this?
When we want to call an already overridden method, then the use of super function comes in.
It is a built-in function, so no requirement of any module import statement. 
What super does is, it allows us to use of the method of our superclass, that in the case of inheritance is the parent class. 
Syntax of using super() is
class Parent_Class(object):
      def __init__(self):
            pass

class Child_Class(Parent_Class):
     def __init__(self):
           super().__init__()
           
           


