// problem -> You are given a 2-D array 'MATRIX' of dimensions N x M, of integers. You need to return the spiral path of the matrix.

// SOL URL -> https://ide.geeksforgeeks.org/ac35b008-aa09-4d3c-ac5d-259bb1dabdca

def spiralPathMatrix(matrix, n, m):
    left = 0
    right = m-1
    top = 0
    bottom = n-1
    
    ans = []
    
    while top <= bottom and left <= right:
        #1. move from left to right
        for i in range(left, right+1):
            ans.append(matrix[top][i])
            
        top += 1
        
        #2. move from top to bottom
        for i in range(top, bottom+1):
            ans.append(matrix[i][right])
            
        right -= 1
        
        #3. move from right to left
        if top <= bottom:
            for i in range(right, left-1, -1):
                ans.append(matrix[bottom][i])
                
            bottom -= 1
        
        #4. move from bottom to top
        if left <= right:
            for i in range(bottom, top-1, -1):
                ans.append(matrix[i][left])
                
            left += 1
        
    return ans
    
matrix = [
            [1,2,3,4],
            [14, 15, 16, 5],
            [13, 20, 17, 6],
            [12, 19, 18, 7],
            [11, 10, 9, 8]
        ]
        
ans = spiralPathMatrix(matrix, len(matrix), len(matrix[0]))
print(ans)
