#       GRAPH TRAVERSAL(DFS in Undirected Graph) 

// URL - https://ide.geeksforgeeks.org/08zfhkAcFG

## DFS uses Stack and Recursion
## BFS uses Queue and Iteration

## DFS TRAVERSAL ALGORITHM
### TIme.C -> O(V+E)
### Space.C -> O(V)

from collections import defaultdict


def dfs(graph, start, visited, path):
    path.append(start)
    visited[start] = True
    for neighbour in graph[start]:
        if visited[neighbour] == False:
            dfs(graph, neighbour, visited, path)
    return path


v, e = map(int, input().split()) #vertex and edges

graph = defaultdict(list)

for i in range(e):
    u, v = map(str, input().split())
    graph[u].append(v)
    graph[v].append(u)
    
path = []
start = 'A'
visited = defaultdict(bool)
traversepath = dfs(graph, start, visited, path)
print(traversepath)
