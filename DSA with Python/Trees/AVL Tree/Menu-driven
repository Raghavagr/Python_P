// CODE

class AVLNode:
    def __init__(self. data):
        self.data = data
        self.leftchild = None
        self.rightchild = None
        self.height = 1
        
    def SearchNode(rootNode, dummyNode):
        pass
    
    def getHeight(rootNode):
        if not rootNode:
            return 0
        return rootNode.height
        
    def RightRotate(disbalanceNode):
        newRoot = disbalanceNode.leftchild
        disbalanceNode.leftchild = disbalanceNode.leftchild.rightchild
        newRoot.rightchild = disbalanceNode
        disbalanceNode.height = 1 + max(getHeight(disbalanceNode.leftchild), getHeight(disbalanceNode.rightchild))
        newRoot.height = 1 + max(getHeight(newRoot.leftchild), getHeight(newRoot.rightchild))
        return newRoot
        
    def leftRotate(disbalanceNode):
        newRoot = disbalanceNode.rightchild
        disbalanceNode.rightchild = disbalanceNode.rightchild.leftchild
        newRoot.leftchild = disbalanceNode
        disbalanceNode.height = 1 + max(getHeight(disbalanceNode.leftchild), getHeight(disbalanceNode.rightchild))
        newRoot.height = 1 + max(getHeight(newRoot.leftchild), getHeight(newRoot.rightchild))
        return newRoot
        
    
    def getBalance(disbalanceNode):
        if not rootNode:
            return 0
        return getHeight(rootNode.leftchild) - getHeight(rootNode.rightchild)
        
    
    def InsertNode(rootNode, nodeValue):
        if not rootNode:
            return AVLNode(nodeValue)
            
        elif nodeValue < rootNode.data:
            rootNode.leftchild = InsertNode(rootNode.leftchild, nodeValue)
            
        else:
            rootNode.rightchild = InsertNode(rootNode.rightchild, nodeValue)
            
        rootNode.height = 1 + max(getHeight(rootNode.leftchild), getHeight(rootNode.rightchild))
        balance = getBalance(rootNode)
        if balance > 1 and nodeValue < rootNode.leftchild.data:
            return RightRotate(rootNode)
        if balance > 1 and nodeValue > rootNode.leftchild.data:
            rootNode.leftchild = leftRotate(rootNode.leftchild)
            return RightRotate(rootNode)
            
        if balance < -1 and nodeValue > rootNode.rightchild.data:
            return leftRotate(rootNode)
            
        if balance < -1 and nodeValue < rootNode.rightchild.data:
            rootNode.rightchild = RightRotate(rootNode.rightchild)
            return leftRotate(rootNode)
            
        return rootNode
        
    def getMinValNode(rootNode):
        if rootNode is None or rootNode.leftchild is None:
            return rootNode
            
        return getMinValNode(rootNode.leftchild)
