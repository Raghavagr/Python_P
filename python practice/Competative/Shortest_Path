#Find Shortest Path from source to destination

// URL - https://ide.geeksforgeeks.org/qThVjvq4gZ

#code
import heapq
from collections import defaultdict


## heap is able to maintain all vertices that we are pushing in it.
## as we push source it will keep track of source and all nodes we push
# keep a track record of vertices with the cost
# heappop will return vertex with least cost
# greedy SRC -> MIN - > MIN -> MIN -> DEST

def shortestPath(graph, src, dest):
    h = []
    
    heapq.heappush(h, (0, src))
    
    while(len(h)!=0):
        curr_cost, curr_vtx = heapq.heappop(h)
        if curr_vtx == dest:
            print("Path Exisits {} to {} with cost {}".format(src,dest,curr_cost))
            break
        for neigh, neighcost in graph[curr_vtx]:
            heapq.heappush(h, (curr_cost+neighcost, neigh))

graph = defaultdict(list)
v, e = map(int, input().split())
for i in range(e):
    u, v, w = map(str, input().split())
    graph[u].append((v, int(w)))
    
#enter source and destination
src, dest = map(str,input().split())
shortestPath(graph,src,dest)
