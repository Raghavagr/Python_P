// Find the length of longest subsequence of second str present in first string

-> NOTE :- Substring is different, subsequence is different. In subsequence the characters should be present is same order not necessary in continuous way.

// URL - https://ide.geeksforgeeks.org/wySOJxEsz5

// Approach-1 (SIMPLE) COMPLEXITY -> O(n^2)
def LCS(i, j):
    if i == 0 or j == 0:
        return 0
    elif A[i-1] == B[j-1]:
        return 1 + LCS(i-1, j-1)
    else:
        return max(LCS(i, j-1), LCS(i-1, j))
        
print(LCS(len(A), len(B)))

// Approach -2 (Optimized Solution) -> O(n)

#use memoization
memo = {}

def LCS(i, j):
    k = str(i) + str(j)
    if k in memo:
       return memo[k]
    if i==0 or j == 0:
        return 0
    elif A[i-1] == B[j-1]:
        value = 1 + LCS(i-1, j-1)
    else:
        value = max(LCS(i, j-1), LCS(i-1, j))
        
    memo[k] = value
    return value


print(LCS(len(A), len(B)))

/// APPROACH - 3 (TABULAR METHOD)   -> O(n)

// URL - https://ide.geeksforgeeks.org/xaOo2Uzj09

#code
A = input()
B = input()

#using Tabular approach

def LCS(A, B):
    la = len(A)
    lb = len(B)
    table = [[-1 for x in range(lb+1)] for x in range(la+1)]
    
    for i in range(la+1):
        for j in range(lb+1):
            if i == 0 or j == 0:
                table[i][j] = 0
            elif A[i-1] == B[j-1]:
                table[i][j] = 1 + table[i-1][j-1]
            else:
                table[i][j] = max(table[i][j-1], table[i-1][j])
                
    return table[la][lb]
    
print(LCS(A, B))
    
