// Problem statement

Given a partially filled 9×9 2D array ‘grid[9][9]’, the goal is to assign digits (from 1 to 9) to the empty cells 
so that every row, column, and subgrid of size 3×3 contains exactly one instance of the digits from 1 to 9.

APPROACH -> BACKTRACKING

// SOL LINK -> https://ide.geeksforgeeks.org/OlngwX5tsM

#       Solving SUDOKU CODE 

###CONSTRAINT-1 (All elements in row should be unique) let's check this
## what ever we are inserting should not previously present in that row
def row_valid(row, col, grid, k):
    for i in range(9):
        if grid[row][i] == k:
            return False
    return True
    
###CONSTRAINT-2 (All elements in column should be unique) let's check this
## what ever we are inserting should not previously present in that column
def column_valid(row, col, grid, k):
    for i in range(9):
        if grid[i][col] == k:
            return False
    return True
    
###CONSTRAINT-3 (All elements in sub-matrix should be unique) 
## 9*9 grid divided into 3*3 sub-matrix of 9 elements
## and what ever we insert in 3*3 should also be unique from 1-9
def subbox_valid(row, col, grid, k):
    for i in range(0, 9, 3):
        if row >= i and row  < i+3:
            row_start = i
            row_end = i+3
        
        if col >= i and col < i+3:
            col_start = i
            col_end = i+3 
    
    for i in range(row_start, row_end):
        for j in range(col_start, col_end):
            if grid[i][j] == k:
                return False
                
    #else k in unique so return True
    return True

# Function which will check all the three cond is valid on element at cur pos
def valid(row, col, grid, k):
    if (row_valid(row, col, grid, k) and column_valid(row, col, grid, k) and subbox_valid(row, col, grid, k)):
        return True
    
    return False

# Backtracking and solving SUDOKU Logic
def SUDOKU(i, j, grid):
    ## Base case 
    if i == len(grid):
        return True
        
    #Recursion like in row till we not reach last column
    
    #If the element is present (already filled)
    if grid[i][j] != 0:
        if j == 8:
            #chang the row(new row)
            return SUDOKU(i+1, 0, grid)
        else:
            #chang the col
            return SUDOKU(i, j+1, grid)
            
    #Else element is not filled
    for k in range(1, 10):
        if valid(i, j, grid, k):
            grid[i][j] = k
            if j==8:
                if(SUDOKU(i+1, 0, grid)):
                    return True
            else:
                if(SUDOKU(i, j+1, grid)):
                    return True
            #Backtracking
            grid[i][j] = 0
    
    return False
    
def solveSudoku(grid):
    SUDOKU(0, 0, grid)


global grid
grid = [ [3, 0, 6, 5, 0, 8, 4, 0, 0], 
         [5, 2, 0, 0, 0, 0, 0, 0, 0], 
         [0, 8, 7, 0, 0, 0, 0, 3, 1], 
         [0, 0, 3, 0, 1, 0, 0, 8, 0], 
         [9, 0, 0, 8, 6, 3, 0, 0, 5], 
         [0, 5, 0, 0, 9, 0, 6, 0, 0], 
         [1, 3, 0, 0, 0, 0, 2, 5, 0], 
         [0, 0, 0, 0, 0, 0, 0, 7, 4], 
         [0, 0, 5, 2, 0, 6, 3, 0, 0] 
        ]

solveSudoku(grid)

for row in grid:
    print(*row)
