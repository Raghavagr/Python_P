// Deletion Operation in Singly LL

// URL - #code
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SingleLinkedList:
    def __init__(self):
        self.head = None
        
    def print_all(self):
        if self.head is None:
            print("List is empty")
        else:
            n = self.head
            print("\nYour list elements:")
            while n is not None:
                print(n.data, end=" ")
                n = n.next
                
    #insert at beg 
    def add_begin(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node
        
    #insert at last 
    def add_last(self, data):
        new_node = Node(data)
        
        if self.head is None:
            self.head = new_node
        else:
            temp = self.head
            while temp.next is not None:
                temp = temp.next
            
            temp.next = new_node
        
    #add after node 
    def add_after_node(self, data, x):
        temp = self.head
        while temp is not None:
            if temp.data == x:
                f=1
                break
            else:
                f=0
                temp = temp.next
        if f == 1:
            new_node = Node(data)
            new_node.next = temp.next
            temp.next = new_node;
        else:
            print("where you want to insert the data is not present")
            
    #add before Node
    def add_before_node(self, data, x):
        temp = self.head
        if temp is None:
            print("List is empty, before is cannot be inserted")
            return
        
        #if first node data matches then begin insert
        elif temp.data == x:
            new_node = Node(data)
            new_node.next = self.head
            self.head = new_node
        
        else:
            while temp.next is not None:
                if temp.next.data == x:
                    f=1 
                    break
                else:
                    f=0
                    temp = temp.next
        if f==1: #node found
            new_node = Node(data)
            new_node.next = temp.next
            temp.next = new_node
        else:
            print("\nWhere you want to insert Node not found")
            
    ## Delete Operations
    #Case-1
    def delete_begin(self):
        if self.head is None:
            print("List is empty")
        else:
            temp = self.head
            self.head = temp.next
            print("\nNode deleted from begining")
        
    #Case-2
    def delete_end(self):
        if self.head is None:
            print("List Empty")
        else:
            temp = self.head
            while temp.next.next is not None:
                temp = temp.next
            
            temp.next = None
            print("\nNode deleted from end")
            
    #Case-3
    def delete_by_value(self, x):
        if self.head is None:
            print("List Empty")
        
        elif self.head.data == x:
            self.head = self.head.next
        
        else:
            temp = self.head
            while temp.next is not None:
                if temp.next.data == x:
                    break
                else:
                    temp = temp.next
                    
            if temp.next is None:
                print("Node not present")
            else:
                temp.next = temp.next.next
                print("node found and deleted")
        
    
mylist1 = SingleLinkedList()
mylist1.add_begin(30)
mylist1.add_begin(20)
mylist1.add_begin(10)
mylist1.print_all() #insert at begin is there so element will in reversed
mylist1.add_last(50)
mylist1.print_all()
mylist1.add_after_node(40, 30)
mylist1.print_all()
mylist1.add_before_node(25, 30)
mylist1.print_all()
mylist1.add_before_node(45, 60)
mylist1.print_all()
mylist1.delete_begin()
mylist1.print_all()
mylist1.delete_end()
mylist1.print_all()
mylist1.delete_by_value(25)
mylist1.print_all()
